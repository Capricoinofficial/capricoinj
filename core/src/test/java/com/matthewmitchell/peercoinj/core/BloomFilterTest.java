/*
 * Copyright 2012 Matt Corallo
 * Copyright 2014 Andreas Schildbach
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.matthewmitchell.peercoinj.core;

import com.matthewmitchell.peercoinj.core.Address;
import com.matthewmitchell.peercoinj.params.MainNetParams;
import com.matthewmitchell.peercoinj.wallet.KeyChainGroup;
import org.junit.Test;

import java.util.Arrays;

import static com.matthewmitchell.peercoinj.core.Utils.HEX;
import static org.junit.Assert.*;

public class BloomFilterTest {
    @Test
    public void insertSerializeTest() {
        BloomFilter filter = new BloomFilter(3, 0.01, 0, BloomFilter.BloomUpdate.UPDATE_ALL);
        
        filter.insert(HEX.decode("99108ad8ed9bb6274d3980bab5a85c048f0950c8"));
        assertTrue (filter.contains(HEX.decode("99108ad8ed9bb6274d3980bab5a85c048f0950c8")));
        // One bit different in first byte
        assertFalse(filter.contains(HEX.decode("19108ad8ed9bb6274d3980bab5a85c048f0950c8")));

        filter.insert(HEX.decode("b5a2c786d9ef4658287ced5914b37a1b4aa32eee"));
        assertTrue(filter.contains(HEX.decode("b5a2c786d9ef4658287ced5914b37a1b4aa32eee")));
        
        filter.insert(HEX.decode("b9300670b4c5366e95b2699e8b18bc75e5f729c5"));
        assertTrue(filter.contains(HEX.decode("b9300670b4c5366e95b2699e8b18bc75e5f729c5")));
        
        // Value generated by the reference client
        assertTrue(Arrays.equals(HEX.decode("03614e9b050000000000000001"), filter.peercoinSerialize()));
    }
    
    @Test
    public void insertSerializeTestWithTweak() {
        BloomFilter filter = new BloomFilter(3, 0.01, 2147483649L);
        
        filter.insert(HEX.decode("99108ad8ed9bb6274d3980bab5a85c048f0950c8"));
        assertTrue (filter.contains(HEX.decode("99108ad8ed9bb6274d3980bab5a85c048f0950c8")));
        // One bit different in first byte
        assertFalse(filter.contains(HEX.decode("19108ad8ed9bb6274d3980bab5a85c048f0950c8")));

        filter.insert(HEX.decode("b5a2c786d9ef4658287ced5914b37a1b4aa32eee"));
        assertTrue(filter.contains(HEX.decode("b5a2c786d9ef4658287ced5914b37a1b4aa32eee")));
        
        filter.insert(HEX.decode("b9300670b4c5366e95b2699e8b18bc75e5f729c5"));
        assertTrue(filter.contains(HEX.decode("b9300670b4c5366e95b2699e8b18bc75e5f729c5")));
        
        // Value generated by the reference client
        assertTrue(Arrays.equals(HEX.decode("03ce4299050000000100008002"), filter.peercoinSerialize()));
    }

    @Test
    public void walletTest() throws Exception {
        NetworkParameters params = MainNetParams.get();

        DumpedPrivateKey privKey = new DumpedPrivateKey(params, "5Kg1gnAjaLfKiwhhPpGS3QfRg2m6awQvaj98JCZBZQ5SuS2F15C");
        
        Address addr = privKey.getKey().toAddress(params);
        assertTrue(addr.toString().equals("17Wx1GQfyPTNWpQMHrTwRSMTCAonSiZx9e"));

        KeyChainGroup group = new KeyChainGroup(params);
        // Add a random key which happens to have been used in a recent generation
        group.importKeys(privKey.getKey(), ECKey.fromPublicOnly(HEX.decode("02b51a5b0e88627675af1d5414aa2cab6180f5041a83cc1f01f983a90197214fe8")));
        Wallet wallet = new Wallet(params, group);
        wallet.commitTx(new Transaction(params, HEX.decode("01000000dd55125401f78efc61ba0efcc0a7e4cfe500243134c836ad8e711df50f7b20da7803c9e768000000006c493046022100e81fbb5e9713dce02b83d40eb12a2817afe75495a1d94c0fbe7550d5f6a8ab4b022100bdc7425a84a57dbeb645c2ef13c51ed61efa8af37157d03071e9f8d96d7815a8012102f8d2c02b00df38ca0855b3c8d8080ba464d4a107cfd0a9fa6b372c05ae3f0ab9ffffffff02d0230d04000000001976a914f64abd6e80f8c0ad346ef518627310cd58ed75b888ac80c3c901000000001976a91462498536f21c70ecba83e78e5cabf43d590d287788ac00000000")));
        
        // We should have 2 per pubkey, and one for the pay-2-pubkey output we have
        assertEquals(5, wallet.getBloomFilterElementCount());
    }
}
